package ir.mehdiyari.kapt.processor

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import ir.mehdiyari.annotations.HelloWorldAnnotation
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.RoundEnvironment
import javax.lang.model.SourceVersion
import javax.lang.model.element.TypeElement

/**
 * This is simple processor that use JSR-269 API and kotlinpoet library to generate
 * extension function for annotated classes with [HelloWorldAnnotation]
 */
class HelloWorldProcessor : AbstractProcessor() {

    override fun process(annotations: MutableSet<out TypeElement>?, roundEnv: RoundEnvironment?): Boolean {
        val typeElement = annotations?.firstOrNull() ?: return false

        for (annotatedElement in roundEnv?.getElementsAnnotatedWith(typeElement) ?: setOf()) {
            val elementPackageName = processingEnv.elementUtils.getPackageOf(annotatedElement).qualifiedName.toString()
            FileSpec.builder(
                packageName = elementPackageName,
                fileName = "${annotatedElement.simpleName}_KAPT_Generated"
            ).also { currentClassFileSpec ->
                FunSpec.builder("printHelloWorldKapt").receiver(
                    ClassName(
                        elementPackageName,
                        annotatedElement.simpleName.toString()
                    )
                ).addStatement("println(\"${annotatedElement.simpleName}: Hello world! This function generated by Kapt\")").build().also(currentClassFileSpec::addFunction)
            }.build().writeTo(processingEnv.filer)
        }

        return true
    }

    override fun getSupportedAnnotationTypes(): MutableSet<String> = mutableSetOf<String>().apply {
        add(HelloWorldAnnotation::class.java.canonicalName)
    }

    override fun getSupportedSourceVersion(): SourceVersion = SourceVersion.latestSupported()
}